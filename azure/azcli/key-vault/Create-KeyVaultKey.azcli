#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Key Vault - https://docs.microsoft.com/en-us/azure/key-vault/general/
# https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-cli
# https://docs.microsoft.com/en-us/azure/key-vault/general/manage-with-cli2

# Azure Key Vault is a cloud-based key management solution, making it easier to create and control the 
# encryption keys used to encrypt your data. 
# A given key in a key vault is a cryptographic asset destined for a particular use such as the asymmetric 
# master key of Microsoft Azure RMS, or the asymmetric keys used for SQL Server TDE (Transparent Data Encryption), 
# CLE (Column Level Encryption) and Encrypted backup.

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a Key Vault.
# 4- Create a Key in the KeyVault.
# 5- Get a Key from the key vault.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login --use-device-code
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.KeyVault"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="rg-testappname-shared-$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Create a Key Vault"
# Key Vault naming rule: length	3-24, Alphanumerics and hyphens.
paramKeyVault="kv-testappname-shared-$RANDOM"
paramSku="standard" # Allowed values for Vault: premium, standard.
az keyvault create --name "$paramKeyVault" --enable-purge-protection --sku "$paramSku" \
  --resource-group "$paramResourceGroup" --location "$paramLocation" --tags $paramTags


echo "---> Access policies: Give a user account permissions to access items in the new Key Vault"
paramUserPrincipal=$(az ad signed-in-user show --query "userPrincipalName" --output tsv) # You can take this value from Azure AD - Users -> User principal name
# See the full list of permissions here: https://docs.microsoft.com/en-us/cli/azure/keyvault?view=azure-cli-latest#az_keyvault_set_policy
az keyvault set-policy --name "$paramKeyVault" \
    --upn "$paramUserPrincipal" \
  --key-permissions get create list import \
  --secret-permissions backup restore set get \
  --storage-permissions get set list \
  --certificate-permissions get list


# --------------- 4 --------------- 
echo "---> Create a Key in the KeyVault"
paramKey="cryptographicKey1"
paramProtection="software" # accepted values: hsm, software
paramTypeOfKey="RSA" # accepted values: EC, EC-HSM, RSA, RSA-HSM, oct, oct-HSM
paramKeySize="2048" # The key size in bits. For example: 2048, 3072, or 4096 for RSA. 128, 192, or 256 for oct.
if [ "$(uname)" == "Darwin" ]; then
  expireDateTime=`date -u -j -v +2y '+%Y-%m-%dT%H:%MZ'`
else
  expireDateTime=`date -u -d "2 years" '+%Y-%m-%dT%H:%MZ'`
fi

# For production use, it's recommended to use a Hardware Security Module (HSM)-protected keys and use 
# software-protected keys in only test/pilot scenarios. There is an additional charge for HSM-backed keys per-month.
# Hardware protected keys require --hsm-name (--hsm-name and --vault-name are mutually exclusive, specify just one of them)
az keyvault key create --name "$paramKey" --vault-name "$paramKeyVault" \
  --protection "$paramProtection" --kty "$paramTypeOfKey" --size "$paramKeySize" \
  --expires "$expireDateTime" --tags $paramTags

# # If you have an existing key in a .pem file, you can upload it to Azure Key Vault. 
# # You can choose to protect the key with software or HSM. 
# paramKeyPassword=""
# paramFileLocation="./softkey.pem"
# az keyvault key import --name "$paramKey" --vault-name "$paramKeyVault" \
#   --pem-file "$paramFileLocation" --pem-password "$paramKeyPassword" --protection "$paramProtection" \
#   --tags $paramTags


# --------------- 5 --------------- 
echo "---> Get a Key from the key vault"
# Gets the public part of a stored key.
az keyvault key show --name "$paramKey" --vault-name "$paramKeyVault"

# Encrypt an arbitrary sequence of bytes using an encryption key that is stored in a Vault or HSM.
# az keyvault key encrypt

# Decrypt a single block of encrypted data.
# az keyvault key decrypt

# Cleanup 
# Remove Resource Group
#az group delete --name $paramResourceGroup --yes
