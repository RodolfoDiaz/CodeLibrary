#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Key Vault - https://docs.microsoft.com/en-us/azure/key-vault/general/
# https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-cli

# Azure Key Vault is a secret store: a centralized cloud service for storing application secrets.
# Key Vault allows users to store connection strings, secrets, passwords, certificates, access policies, 
# file locks (making items in Azure read-only), and automation scripts. 
# Key Vault is designed to store configuration secrets for server applications. It's not intended for 
# storing data belonging to your app's users, and it shouldn't be used in the client-side part of an app. 

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a Key Vault.
# 4- Create a secret in the KeyVault.
# 5- Get a secret from the key vault.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login --use-device-code
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.KeyVault"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="test_resourcegroup_$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Create a Key Vault"
# Key Vault naming rule: length	3-24, Alphanumerics and hyphens.
paramKeyVault="test-keyvault-$RANDOM"
paramSku="standard" # Allowed values for Vault: premium, standard.
az keyvault create --name "$paramKeyVault" --enable-purge-protection --sku "$paramSku" \
  --resource-group "$paramResourceGroup" --location "$paramLocation" --tags $paramTags


echo "---> Access policies: Give a user account permissions to access items in the new Key Vault"
paramUserPrincipal=$(az ad signed-in-user show --query "userPrincipalName" --output tsv) # You can take this value from Azure AD - Users -> User principal name
# See the full list of permissions here: https://docs.microsoft.com/en-us/cli/azure/keyvault?view=azure-cli-latest#az_keyvault_set_policy
az keyvault set-policy --name "$paramKeyVault" \
    --upn "$paramUserPrincipal" \
  --key-permissions get create list import \
  --secret-permissions backup restore set get \
  --storage-permissions get set list \
  --certificate-permissions get list


# --------------- 4 --------------- 
echo "---> Create a secret in the KeyVault"
# Secrets are small (less than 10K) data blobs protected by a HSM-generated key created with the Key Vault.
# Secrets exist to simplify the process of persisting sensitive settings that almost every application has: 
# storage account keys, .PFX files, SQL connection strings, data encryption keys, etc.

paramInputFile="SecretTestFile.txt"
paramOutputFile="SecretDownload.txt"
if [ -f $paramInputFile ]; then echo 'Remove old input file...'; rm $paramInputFile; fi
if [ -f $paramOutputFile ]; then echo 'Remove old output file...'; rm $paramOutputFile; fi
paramSecretName1="SecretKey"
paramSecretDesc="This is a secret key"
paramSecretValue="Key-123$"
az keyvault secret set --name "$paramSecretName1" \
  --vault-name "$paramKeyVault" --value "$paramSecretValue" --description "$paramSecretDesc" --tags $paramTags

paramSecretName2="SecretFile"
echo "This is a test file we want to keep safe" >> $paramInputFile
paramSecretFileEncoding="utf-8" # accepted values: ascii, base64, hex, utf-16be, utf-16le, utf-8
az keyvault secret set --name "$paramSecretName2" \
  --vault-name "$paramKeyVault" --file "$paramInputFile" --encoding "$paramSecretFileEncoding" --tags $paramTags

 
# --------------- 5 --------------- 
echo "---> Get a secret from the key vault"
secretValue=$(az keyvault secret show \
  --name "$paramSecretName1" \
  --vault-name "$paramKeyVault" \
  --query value \
  --output tsv)

echo "---> The secret key is $secretValue"

az keyvault secret download --name "$paramSecretName2" --vault-name "$paramKeyVault" --file "$paramOutputFile"
echo "---> The '$paramOutputFile' file has been downloaded"

# Cleanup 
# Remove Resource Group
#az group delete --name $paramResourceGroup --yes