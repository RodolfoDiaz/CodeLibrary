#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Functions - https://azure.microsoft.com/en-us/services/functions/

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create a function app.
# 6- Set the function app settings.
# 7- Deploy the function.
# 8- Test the function.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.Web"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="test_resourcegroup_$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# We need a storage account for the deployed code to live in. Storage accounts also
# need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
paramStorageAccount="teststorage$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
paramStorageKind="StorageV2"    # https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
az storage account create --name "$paramStorageAccount" --resource-group "$paramResourceGroup" --location "$paramLocation" --sku "$paramStorageSku" --kind "$paramStorageKind" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Get storage account key and connection string"
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
accountKey="$(az storage account keys list --account-name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
storageConnectionString="DefaultEndpointsProtocol=https;AccountName=$paramStorageAccount;AccountKey=$accountKey;EndpointSuffix=core.windows.net"
echo $storageConnectionString


# --------------- 5 --------------- 
echo "---> Create a Function App"
# https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest#az_functionapp_create
# https://docs.microsoft.com/en-us/azure/azure-functions/functions-versions
# Function App naming rules: length 2-59,	Alphanumerics and hyphens.
paramFunctionApp="test-functionapp-$RANDOM"
paramFunctionAppVersion="3"

# deployFunctionAppOS="Windows"
# deployRuntimeStack="node"
# deployRuntimeVersion="14"
# deployFunctionName="HelloWorld-JS"

deployFunctionAppOS="Linux"
deployRuntimeStack="python"
deployRuntimeVersion="3.8"
deployFunctionName="HelloWorld-Python"

# Set the OS type for the app to be created. accepted values: Linux, Windows
paramFunctionAppOS=$deployFunctionAppOS
# Set the runtime language - https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
# Valid values are: dotnet (C#/F#), node (JavaScript/TypeScript), java (Java), powershell (PowerShell), and python (Python).
functionAppRuntimeStack=$deployRuntimeStack
# The version of the functions runtime stack. 
# Allowed values for each --runtime are: node -> [8, 10, 12, 14], java -> [8, 11], powershell -> [7.0], python -> [3.6, 3.7, 3.8].
functionRuntimeVersion=$deployRuntimeVersion
# Hosting: Azure Functions run in a service plan on Azure App Service. You choose one of the following options:
# - Consumption Plan (serverless automatic scale, limited to 5 minutes each function invocation), 
# - App Service Plan (traditional pricing model, no time limit) 
# - Premium Plan (for faster performance, enhanced security and reserved instances).
# To specify the hosting choice you use either: --consumption-plan-location (for the consumption plan location) or --plan (for the App Service Plan you created)
az functionapp create --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --storage-account "$paramStorageAccount" --functions-version "$paramFunctionAppVersion" --os-type "$paramFunctionAppOS" --consumption-plan-location "$paramLocation" --runtime "$functionAppRuntimeStack" --runtime-version "$functionRuntimeVersion" --tags $paramTags
# Set the function name
functionName=$deployFunctionName

# --------------- 6 --------------- 
echo "---> Configure Function App settings"
# Set Function app settings
# https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
# https://docs.microsoft.com/en-us/cli/azure/functionapp/config/appsettings?view=azure-cli-latest#az_functionapp_config_appsettings_set
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobDashboard=$storageConnectionString"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobsStorage=$storageConnectionString"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobsSecretStorageType=Files"


# --------------- 7 --------------- 
echo "---> Deploy the function"
# https://docs.microsoft.com/en-us/cli/azure/functionapp/deployment/source?view=azure-cli-latest#az_functionapp_deployment_source_config_zip
publishZip="$functionName.zip"
cd example
if [ -f $publishZip ]; then echo 'Remove old ZIP file...'; rm $publishZip; fi
echo "Create new ZIP file..."
zip -r $publishZip $functionName
az functionapp deployment source config-zip --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --src "$publishZip"
cd ..


# --------------- 8 --------------- 
echo "---> Test the function"
# The Authorization level was set as Function in the 'function.json'.  A function-specific API key is required. 
# For admin auth level, the master key is required.  master key is scoped at the function app level, the master key also provides administrative access to the runtime REST APIs.
functionKey="$(az functionapp function keys list --function-name "$functionName" --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --query "default" -o tsv)"
invokeUrl="$(az functionapp function show --function-name "$functionName" --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --query "invokeUrlTemplate" -o tsv)"
functionUrl="$invokeUrl"
functionUrl+="?code="
functionUrl+="$functionKey"

echo "--->  Using GET method"
functionUrlGet="$functionUrl&name=World_GET"
echo $functionUrlGet
az rest --method get --url "$functionUrlGet"

python -m webbrowser "$functionUrlGet"

echo "--->  Using POST method"
az rest --method post --url "$functionUrl" --body '{ "name":"World_POST" }'

# Test with cURL
# Caution: If you are on Windows, please run cURL from the command prompt. 
# PowerShell has a curl command, but it's an alias for Invoke-WebRequest and is not the same as cURL.
# curl --header "Content-Type: application/json" --header "x-functions-key: <your-function-key>" --request POST --data "{\"name\": \"Azure Function\"}" https://<your-url-here>/api/HelloWorld-PS


# Cleanup 
# Remove Resource Group
#az group delete --name $paramResourceGroup --yes
