#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Service Bus Queues - https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quickstart-cli

# Azure Service Bus Queues work in a Producer-Consumer model (one to one).
# Azure Service Bus Topics work in a Publisher-Subscriber model (one to many). Topics will have subscriptions.
# For each subscription we define a filter (there are 3 types: boolean filter, SQL filter and correlation filters)
# Azure Service Bus provides the following (compared to Storage Queues):
# - Support for receiving messages without polling (with AMQP 1.0)
# - Guaranteed message processing order (FIFO)
# - Detect duplicate messages
# - Messages can be up to 256 KB
# - Support publishing and consuming in batches
# - Service Bus queues are limited to 80 GB

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a Service Bus messaging namespace.
# 4- Create a queue in the namespace you created.
# 5- Get the primary connection string for the namespace.
# 6- Create the application.

# The following commands are available in PowerShell:
# Get-Command -Module Az.ServiceBus

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login --use-device-code
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.ServiceBus"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="rg-testapp1-shared-$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a Service Bus messaging namespace"
paramServiceBusNamespace="sb-testapp1-dev-$RANDOM"
paramNamespaceSku="Basic"  # Service Bus comes in Basic, standard, and premium tiers. For Queues you need "Basic".
az servicebus namespace create --resource-group "$paramResourceGroup" --name "$paramServiceBusNamespace" --sku "$paramNamespaceSku" --location "$paramLocation" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Creating a queue in the namespace you created"
# Namespace naming rules: length 6-50, Alphanumerics and hyphens.
export queueName="sbq-testapp1-dev-$RANDOM"
az servicebus queue create --resource-group "$paramResourceGroup" --namespace-name "$paramServiceBusNamespace" --name "$queueName"

# --------------- 5 --------------- 
echo "---> Get the primary connection string for the namespace"
export primaryConnectionString="$(az servicebus namespace authorization-rule keys list --resource-group "$paramResourceGroup" --namespace-name "$paramServiceBusNamespace" --name RootManageSharedAccessKey --query primaryConnectionString --output tsv)"
echo $primaryConnectionString


# --------------- 6 --------------- 
echo "---> Create the application"
# https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dotnet-get-started-with-queues
appFolderName="ServiceBusQueueApp"
appProgramFile="ProgramSBQ.cs"
if [ -d ./$appFolderName/ ]; then rm -rf $appFolderName; fi
dotnet new console -n $appFolderName
cd $appFolderName
dotnet add package Azure.Messaging.ServiceBus
cp ../$appProgramFile .
mv $appProgramFile Program.cs
echo "---> Check your results"
dotnet build
# NOTE: If you receive a Timeout Exception, your environment is probably blocking the TCP ports
# used for AMQP by default. You need to have ports 5671 and 5672 opened for AMQP connections.
dotnet run
cd ..
