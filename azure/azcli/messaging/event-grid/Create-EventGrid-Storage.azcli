#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Event Grid - https://docs.microsoft.com/en-us/azure/event-grid/

# Azure Event Grid works in a Publisher - Subscriber model. In this case, your solution produce
# discrete events, that report state changes that a system can act on (enable subscribers to take action).
# For example, an IoT device that sends a message saying 'the alarm was set and somebody open a door', 
# then a system takes some action (call the police, send a security guard).
# Other examples: an account was created or an image uploaded, if something is listening or subscribing 
# to that event, there's generally some action that it takes upon receiving the notification.

# In Azure portal you create a resource "Event Grid System Topics", to setup the event grid topic with an 
# Azure service (for this example, select topic type = 'Storage Accounts')
# Quickstart code: Route storage events to web endpoint with Azure CLI
# https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-event-quickstart?toc=/azure/event-grid/toc.json

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create a message endpoint.
# 6- Subscribe to your storage account.
# 7- Trigger an event from Blob storage.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.EventGrid"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="test_resourcegroup_$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# We need a storage account for the deployed code to live in. Storage accounts also
# need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
paramStorageAccount="teststorage$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
paramStorageKind="StorageV2"    # https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
az storage account create --name "$paramStorageAccount" --resource-group "$paramResourceGroup" --location "$paramLocation" --sku "$paramStorageSku" --kind "$paramStorageKind" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Get storage account key and connection string"
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
accountKey="$(az storage account keys list --account-name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
storageConnectionString="DefaultEndpointsProtocol=https;AccountName=$paramStorageAccount;AccountKey=$accountKey;EndpointSuffix=core.windows.net"
echo $storageConnectionString


# --------------- 5 --------------- 
echo "---> Create a message endpoint"
sitename="test-website-$RANDOM"
az deployment group create \
  --resource-group "$paramResourceGroup" \
  --template-uri "https://raw.githubusercontent.com/Azure-Samples/azure-event-grid-viewer/master/azuredeploy.json" \
  --parameters siteName="$sitename" hostingPlanName="viewerhost"

echo "Open URL in default browser - https://$sitename.azurewebsites.net"
python -m webbrowser "https://$sitename.azurewebsites.net"


# --------------- 6 --------------- 
echo "---> Subscribe to your storage account"
storageid=$(az storage account show --name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query id --output tsv)
endpoint="https://$sitename.azurewebsites.net/api/updates"
eventSubscriptionName="gridBlobTest"

az eventgrid event-subscription create \
  --source-resource-id "$storageid" \
  --name "$eventSubscriptionName" \
  --endpoint "$endpoint"


# --------------- 6 --------------- 
echo "---> Trigger an event from Blob storage."
containerName="gridcontainer-$RANDOM"
storageAccountKey="$(az storage account keys list --account-name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query "[0].value" --output tsv)"
az storage container create --name "$containerName" --account-name "$paramStorageAccount" --account-key "$storageAccountKey" --connection-string "$storageConnectionString"

echo "This is a test file" >> gridTestFile.txt
az storage blob upload --file "gridTestFile.txt" \
    --container-name "$containerName" --name "gridTestFile.txt" \
    --account-name "$paramStorageAccount" --account-key "$storageAccountKey" \
    --connection-string "$storageConnectionString"

# Cleanup 
# Remove Resource Group
#az group delete --name $paramResourceGroup --yes
