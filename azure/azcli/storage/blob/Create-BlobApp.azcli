#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Blob Storage - https://docs.microsoft.com/en-us/azure/storage/blobs/

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create a blob container and upload file.
# 6- Create the application

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.Web"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="test_resourcegroup_$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# We need a storage account for the deployed code to live in. Storage accounts also
# need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
AZURE_STORAGE_ACCOUNT="teststorage$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
paramStorageKind="StorageV2"    # https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
az storage account create --name "$AZURE_STORAGE_ACCOUNT" --resource-group "$paramResourceGroup" --location "$paramLocation" --sku "$paramStorageSku" --kind "$paramStorageKind" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Get storage account key and connection string"
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
AZURE_STORAGE_KEY="$(az storage account keys list --account-name "$AZURE_STORAGE_ACCOUNT" --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
export AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=$AZURE_STORAGE_ACCOUNT;AccountKey=$AZURE_STORAGE_KEY;EndpointSuffix=core.windows.net"
echo $AZURE_STORAGE_CONNECTION_STRING


# --------------- 5 --------------- 
echo "---> Create a blob container and upload file"
# https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-cli
# https://docs.microsoft.com/en-us/cli/azure/storage/container
paramContainerName="test-image-container"
paramFileName="Azure-Logos.png"
paramPublicAccess="off" # By default, container data is private ("off") to the account owner. Use "blob" to allow public read access for blobs. Use "container" to allow public read and list access to the entire container.
az storage container create --name "$paramContainerName" --account-name "$AZURE_STORAGE_ACCOUNT" \
  --account-key "$AZURE_STORAGE_KEY" --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
  --resource-group "$paramResourceGroup" --public-access "$paramPublicAccess"
az storage blob upload --container-name "$paramContainerName" --file "$paramFileName" --name "$paramFileName" \
  --account-name "$AZURE_STORAGE_ACCOUNT" --account-key "$AZURE_STORAGE_KEY" --connection-string "$AZURE_STORAGE_CONNECTION_STRING"
echo "---> File uploaded to the blob container $paramContainerName is available online with a SAS token."
blobUrl="https://$AZURE_STORAGE_ACCOUNT.blob.core.windows.net/$paramContainerName/$paramFileName?"
echo "URL: $blobUrl"
# Get current date/time in UTC and add 2 hours
endDateTime=`date -u -d "2 hours" '+%Y-%m-%dT%H:%MZ'`
# https://docs.microsoft.com/en-us/cli/azure/storage/blob?view=azure-cli-latest#az_storage_blob_generate_sas
sasToken="$(az storage blob generate-sas --container-name "$paramContainerName" --name "$paramFileName" --permissions r --expiry "$endDateTime" --https-only)"
echo "---> Token: $sasToken"
#blobUrlToken="$(az storage blob url --connection-string "$AZURE_STORAGE_CONNECTION_STRING" --container-name "$paramContainerName" --name "$paramFileName" --sas-token "$sasToken" --full-uri)"
#echo "$blobUrlToken"
python -m webbrowser "${blobUrl}${sasToken}"
echo "---> List items inside the container"
az storage blob list --container-name "$paramContainerName"


# --------------- 6 --------------- 
echo "---> Create the application"
# https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-nodejs
appFolderName=blobTestApp
if [ -d ./$appFolderName ]; then echo 'Remove old folder...'; rm -rf $appFolderName; fi
mkdir $appFolderName
cp index.js $appFolderName
cd $appFolderName
echo "This is a test file" >> blobTestFile.txt
npm init -y
npm install @azure/storage-blob --save
node index.js
cd ..