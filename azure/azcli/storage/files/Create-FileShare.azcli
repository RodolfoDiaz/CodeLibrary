#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Files (https://docs.microsoft.com/en-us/azure/storage/files/)

# Azure Files offers fully managed cross-platform file shares in the cloud that are 
# accessible via the Server Message Block (SMB) protocol.
# Quickstart: https://docs.microsoft.com/en-us/azure/storage/files/storage-how-to-use-files-cli

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create an Azure file share.
# 6- Create a directory and upload a file.
# 7- Download a file.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login --use-device-code
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.Web"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="rg-testapp1-shared-$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# We need a storage account for the deployed code to live in. Storage accounts also
# need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
storageAccountName="stappdata$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
paramStorageKind="StorageV2"    # https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
az storage account create --name "$storageAccountName" --resource-group "$paramResourceGroup" \
  --location "$paramLocation" --sku "$paramStorageSku" --kind "$paramStorageKind" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Get storage account key and connection string"
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
storageAccountKey="$(az storage account keys list --account-name "$storageAccountName" \
  --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
export AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=$storageAccountName;AccountKey=$storageAccountKey;EndpointSuffix=core.windows.net"
echo $AZURE_STORAGE_CONNECTION_STRING


# --------------- 5 --------------- 
echo "---> Create an Azure file share"
# Naming rule: Share names can contain only lowercase letters, numbers, and single hyphens (but they can't start with a hyphen).
shareName="myshare"
az storage share-rm create \
    --resource-group $paramResourceGroup \
    --storage-account $storageAccountName \
    --name $shareName \
    --quota 1024 \
    --enabled-protocols SMB \
    --output none

# --------------- 6 --------------- 
echo "---> Create a directory and upload a file"

directoryName="myDirectory"
az storage directory create \
   --account-name $storageAccountName \
   --account-key $storageAccountKey \
   --share-name $shareName \
   --name "$directoryName" \
   --output none

sourceFileName="azure-logo-fluent-design.png"
az storage file upload \
    --account-name $storageAccountName \
    --account-key $storageAccountKey \
    --share-name $shareName \
    --source "$sourceFileName" \
    --path "$directoryName/$sourceFileName"

az storage file list \
    --account-name $storageAccountName \
    --account-key $storageAccountKey \
    --share-name $shareName \
    --path "$directoryName" \
    --output table

# --------------- 7 --------------- 
echo "---> Download a file"

# Delete an existing file by the same name as SampleDownload.txt, if it exists, because you've run this example before
rm -f $sourceFileName
echo "---> File $sourceFileName removed."

az storage file download \
    --account-name $storageAccountName \
    --account-key $storageAccountKey \
    --share-name $shareName \
    --path "$directoryName/$sourceFileName" \
    --dest "$sourceFileName" \
    --output none

echo "---> File $sourceFileName downloaded!"

# Cleanup 
# Remove Resource Group
# az group delete --name $paramResourceGroup --yes
