#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Azure Queue Storage - https://docs.microsoft.com/en-us/azure/storage/queues/

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create the application

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login
# az account list

echo "---> Verify registration of the required Azure resource providers"
# https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers
az provider register --namespace "Microsoft.Web"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="test_resourcegroup_$RANDOM"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# We need a storage account for the deployed code to live in. Storage accounts also
# need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
paramStorageAccount="teststorage$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
paramStorageKind="StorageV2"    # https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
az storage account create --name "$paramStorageAccount" --resource-group "$paramResourceGroup" --location "$paramLocation" --sku "$paramStorageSku" --kind "$paramStorageKind" --tags $paramTags


# --------------- 4 --------------- 
echo "---> Get storage account key and connection string"
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
accountKey="$(az storage account keys list --account-name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
export storageConnectionString="DefaultEndpointsProtocol=https;AccountName=$paramStorageAccount;AccountKey=$accountKey;EndpointSuffix=core.windows.net"
echo $storageConnectionString


# --------------- 5 --------------- 
echo "---> Create the application"
#azureQueueClientLibrary="V11" # https://docs.microsoft.com/en-us/azure/storage/queues/storage-quickstart-queues-dotnet-legacy
azureQueueClientLibrary="V12" # https://docs.microsoft.com/en-us/azure/storage/queues/storage-quickstart-queues-dotnet
appFolderName="QueueApp${azureQueueClientLibrary}"
appProgramFile="Program${azureQueueClientLibrary}.cs"
if [ -d ./$appFolderName/ ]; then rm -rf $appFolderName; fi
dotnet new console -n $appFolderName
cd $appFolderName
if [ "$azureQueueClientLibrary" == "V11" ];  then
    dotnet add package WindowsAzure.Storage
elif [ "$azureQueueClientLibrary" == "V12" ];  then
    dotnet add package Azure.Storage.Queues
fi
cp ../$appProgramFile .
mv $appProgramFile Program.cs

# C#'s async and await keywords were not valid keywords in Main methods until C# 7.1. 
# In older dotnet versions (.Net Core 3.x), you may have to add the following:
# <LangVersion>7.1</LangVersion> into the PropertyGroup section in the .csproj file.

dotnet build
echo "---> Check your results"
if [ "$azureQueueClientLibrary" == "V11" ];  then
  dotnet run This is the first message!
  dotnet run This is the second message!
  az storage message peek --queue-name newsqueue --connection-string "$storageConnectionString"
  # There are several other commands available that you can try with the tools - check out both: 
  # "az storage queue --help" and "az storage message --help" to explore them.
  dotnet run
  az storage message peek --queue-name newsqueue --connection-string "$storageConnectionString"
  dotnet run
  az storage message peek --queue-name newsqueue --connection-string "$storageConnectionString"
elif [ "$azureQueueClientLibrary" == "V12" ];  then
  dotnet run
fi
