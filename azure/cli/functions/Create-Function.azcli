#!/bin/bash

# Azure Functions - https://azure.microsoft.com/en-us/services/functions/

# Exit immediately if a command exits with a non-zero status.
set -e

# The deployment process is:
# 1- Log in to Azure.
# 2- Create a resource group.
# 3- Create a storage account.
# 4- Get the storage account connection string.
# 5- Create a function app.
# 6- Set the function app settings.
# 7- Deploy the function.
# 8- Test the function.

# --------------- 1 --------------- 
echo "---> Log in to Azure"
# https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli
az login
# az account list

echo "---> Verify registration of the required Azure resource providers"
# Azure Functions require the Microsoft.Web and Microsoft.Storage providers. 
# Most likely, the providers are already registered, but this will make sure of that.
az provider register --namespace "Microsoft.Web"
az provider register --namespace "Microsoft.Storage"


# --------------- 2 --------------- 
echo "---> Creating resource group"
paramResourceGroup="mytest-func-demo"
paramLocation="westus"
paramTags="Environment=Test Department=IT"

rgExists="$(az group exists --name $paramResourceGroup)"
if [ "$rgExists" == "false" ]; then
  az group create --name "$paramResourceGroup" --location "$paramLocation" --tags $paramTags
fi


# --------------- 3 --------------- 
echo "---> Creating a storage account"
# https://docs.microsoft.com/en-us/cli/azure/storage/account?view=azure-cli-latest#az_storage_account_create
# Azure Functions need a storage account for the deployed code to live in. Storage accounts 
# also need a globally unique name, so we"ll take the first section of a GUID and append it 
# to the storage account name. That should be suitable to make it globally unique.

# Storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.
paramStorageAccount="mytest$RANDOM"
paramStorageSku="Standard_LRS"  # https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types
az storage account create --name "$paramStorageAccount" --resource-group "$paramResourceGroup" --location "$paramLocation" --sku "$paramStorageSku" --tags $paramTags


# --------------- 4 --------------- 
# Get storage account key and create connection string
# https://docs.microsoft.com/en-us/cli/azure/storage/account/keys?view=azure-cli-latest#az_storage_account_keys_list
accountKey="$(az storage account keys list --account-name "$paramStorageAccount" --resource-group "$paramResourceGroup" --query [0].value -o tsv)"
storageConnectionString="DefaultEndpointsProtocol=https;AccountName=$paramStorageAccount;AccountKey=$accountKey"


# --------------- 5 --------------- 
echo "---> Create a Function App"
# https://docs.microsoft.com/en-us/cli/azure/functionapp?view=azure-cli-latest#az_functionapp_create
# https://docs.microsoft.com/en-us/azure/azure-functions/functions-versions
paramFunctionApp="mytest-func"
# Set the runtime language - https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
# Valid values are dotnet (C#/F#), node (JavaScript/TypeScript), java (Java), powershell (PowerShell), and python (Python).
functionAppLanguage="powershell"
#functionRuntimeVersion=7  # set the value for --runtime-version
az functionapp create --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --storage-account "$paramStorageAccount" --functions-version "3" --consumption-plan-location "$paramLocation" --runtime "$functionAppLanguage" --tags $paramTags


# --------------- 6 --------------- 
echo "---> Configure Function App settings"
# Set Function app settings
# https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
# https://docs.microsoft.com/en-us/cli/azure/functionapp/config/appsettings?view=azure-cli-latest#az_functionapp_config_appsettings_set
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobDashboard=$storageConnectionString"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobsStorage=$storageConnectionString"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "AzureWebJobsSecretStorageType=Files"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "FUNCTIONS_EXTENSION_VERSION=~3"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING=$storageConnectionString"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "WEBSITE_CONTENTSHARE=$paramFunctionApp"
az functionapp config appsettings set --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --settings "FUNCTIONS_WORKER_RUNTIME=$functionAppLanguage"


# --------------- 7 --------------- 
echo "---> Deploy the function"
# https://docs.microsoft.com/en-us/cli/azure/functionapp/deployment/source?view=azure-cli-latest#az_functionapp_deployment_source_config_zip
functionName="HelloWorld"
publishZip="$functionName.zip"
az functionapp deployment source config-zip --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --src "$publishZip"
echo "---> Function App Restart"
az functionapp restart --name "$paramFunctionApp" --resource-group "$paramResourceGroup"


# --------------- 8 --------------- 
echo "---> Test the function"
# Test function
masterKey="$(az functionapp keys list --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --query "masterKey" -o tsv)"
invokeUrl="$(az functionapp function show --name "$paramFunctionApp" --resource-group "$paramResourceGroup" --function-name "$functionName" --query "invokeUrlTemplate" -o tsv)"
functionUrl="$invokeUrl"
functionUrl+="?code="
functionUrl+="$masterKey"
functionUrl+="&name=World"

echo "--->  Using GET method"
echo $functionUrl
az rest --method get --url $functionUrl


# Test with cURL
# Caution: If you are on Windows, please run cURL from the command prompt. 
# PowerShell has a curl command, but it's an alias for Invoke-WebRequest and is not the same as cURL.
# curl --header "Content-Type: application/json" --header "x-functions-key: <your-function-key>" --request POST --data "{\"name\": \"Azure Function\"}" https://<your-url-here>/api/HelloWorld


# Cleanup 
# Remove Resource Group
#az group delete --name $paramResourceGroup --yes
